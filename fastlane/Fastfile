default_platform(:ios)

APPLE_ID = ENV['APPLE_ID']
APP_ID = ENV['APP_ID']
WIDGETS_ID = ENV['WIDGETS_ID']
APP_APPLE_ID = ENV['APP_APPLE_ID']
AUTH_KEY_CONTENT = ENV['AUTH_KEY_CONTENT']
AUTH_KEY_ID = ENV['AUTH_KEY_ID']
AUTH_KEY_ISSUER_ID = ENV['AUTH_KEY_ISSUER_ID']
MATCH_GIT_AUTH = ENV['MATCH_GIT_AUTH']
MATCH_GIT_URL = ENV['MATCH_GIT_URL']
ITC_TEAM_ID = ENV['ITC_TEAM_ID']
TEAM_ID = ENV['TEAM_ID']
TEMP_KEYCHAIN_USER = ENV['TEMP_KEYCHAIN_USER']
TEMP_KEYCHAIN_PASSWORD = ENV['TEMP_KEYCHAIN_PASSWORD']
PROVISIONING_PROFILE_SPECIFIER = ENV['PROVISIONING_PROFILE_SPECIFIER']

def project_name
  "Azkar.xcodeproj"
end

def workspace_name
  "Azkar.xcworkspace"
end

def app_name
  "Azkar"
end

def get_api_key
  api_key = app_store_connect_api_key(
    key_id: AUTH_KEY_ID,
    issuer_id: AUTH_KEY_ISSUER_ID,
    key_content: AUTH_KEY_CONTENT,            
    duration: 1200,            
    in_house: false
  )
end

def get_changelog_from_git
  # Get last 10 commits
  changelog = changelog_from_git_commits(
    commits_count: 10,
    pretty: '- %s',
    date_format: 'short',
    merge_commit_filtering: 'exclude_merges'
  )
  
  # If no changelog was generated or it's empty, provide a default message
  if changelog.nil? || changelog.empty?
    changelog = "- Bug fixes and improvements"
  end
  
  return changelog
end

desc 'Synchronizes certificates / profiles using via the App Store Connect API. Optionally creates new ones.'
private_lane :match_configuration do |options|
  match(
    type: options[:type] || 'appstore',
    app_identifier: options[:bundle_id],
    git_basic_authorization: Base64.strict_encode64(MATCH_GIT_AUTH),
    readonly: options[:force] == false,
    api_key: get_api_key,
    force_for_new_devices: options[:force_for_new_devices] == true
  )
end

lane :check_build_status do |options|
  platform = options[:platform] || "IOS" # Default to iOS if not provided

  token = Spaceship::ConnectAPI::Token.create(
    key_id: AUTH_KEY_ID,
    issuer_id: AUTH_KEY_ISSUER_ID,
    key: AUTH_KEY_CONTENT
  )
  Spaceship::ConnectAPI.token = token

  app = Spaceship::ConnectAPI::App.find(ENV['APP_ID'])

  # Fetch the marketing version using Fastlane's get_version_number
  current_marketing_version = get_version_number(xcodeproj: "Azkar.xcodeproj", target: "Azkar")

  if current_marketing_version.nil? || current_marketing_version.empty?
    UI.user_error!("❌ Failed to read marketing version from Info.plist!")
  end

  UI.message("📦 Detected marketing version from Info.plist: #{current_marketing_version}")

  # Fetch existing versions from App Store Connect
  versions = app.get_app_store_versions(filter: { "versionString" => current_marketing_version, "platform" => platform.upcase })

  if versions.empty?
    UI.message("✅ No existing App Store version found for #{current_marketing_version} on platform #{platform}. Safe to proceed.")
    next
  end

  versions.each do |version|
    app_store_state = version.app_store_state
    UI.message("📦 Marketing version #{current_marketing_version} on #{platform} is in state: #{app_store_state}")

    if %w[WAITING_FOR_REVIEW IN_REVIEW PENDING_APPLE_RELEASE PENDING_DEVELOPER_RELEASE READY_FOR_SALE].include?(app_store_state)
      UI.user_error!("🚫 Marketing version #{current_marketing_version} on #{platform} is already in a pending or released state: #{app_store_state}. Consider updating the version.")
    end
  end
end

platform :ios do

  desc 'Synchronizes certificates / profiles and optionally creates new ones.'
  lane :sync_signing do
    bundle_ids = "#{APP_ID},#{WIDGETS_ID}"
    match_configuration(type: 'appstore', bundle_id: bundle_ids)
  end

  desc "Builds and archives app for App Store"
  private_lane :build_for_app_store do
    setup_ci
    sync_signing
    increment_build_number_in_plist(
      xcodeproj: project_name,
      build_number: ENV['GITHUB_RUN_ID'],
      target: app_name
    )
    build_app(workspace: workspace_name, scheme: 'Azkar')
  end
  
  desc "Push a new release build to the App Store"
  lane :release do
    begin
      check_build_status(platform: "IOS")
    rescue => e
      UI.important("🚫 Release process stopped: #{e.message}")
      next # Exit the lane gracefully without failing Fastlane
    end
    build_for_app_store
    upload_to_app_store(
      api_key: get_api_key,
      force: true,
      submit_for_review: true,
      skip_screenshots: true,
      run_precheck_before_submit: false,
      submission_information: {
        add_id_info_uses_idfa: false,
        export_compliance_uses_encryption: false
      }
    )
  end

  lane :closed_beta do
    build_for_app_store
    
    testflight(
      api_key: get_api_key,
      distribute_external: true,
      groups: ['Main'],
      changelog: get_changelog_from_git()
    )
  end

end

platform :mac do

  desc 'Synchronizes certificates / profiles and optionally creates new ones.'
  lane :sync_signing do
    match_configuration
  end

  desc 'Build and release Mac Catalyst app'
  lane :closed_beta do
    setup_ci
    sync_signing
    
    # Get changelog from git history for TestFlight
    changelog = get_changelog_from_git()
    
    # Increment build number
    increment_build_number_in_plist(
      xcodeproj: project_name,
      build_number: ENV['GITHUB_RUN_ID'] || (get_build_number_from_plist(xcodeproj: project_name, target: app_name).to_i + 1).to_s,
      target: app_name
    )

    # Build Mac Catalyst app
    build_app(
      workspace: workspace_name,
      scheme: 'Azkar',
      destination: "generic/platform=macOS,variant=Mac Catalyst",
      skip_codesigning: false
    )

    # Upload to TestFlight
    testflight(
      api_key: get_api_key,
      changelog: changelog,
      platform: "osx"
    )
  end

  desc "Build and release directly to Mac App Store"
  lane :app_store_release do
    begin
      check_build_status(platform: "MAC_OS")
    rescue => e
      UI.important("🚫 Release process stopped: #{e.message}")
      next # Exit the lane gracefully without failing Fastlane
    end

    setup_ci
    sync_signing
    
    # Increment build number
    increment_build_number_in_plist(
      xcodeproj: project_name,
      build_number: ENV['GITHUB_RUN_ID'] || (get_build_number_from_plist(xcodeproj: project_name, target: app_name).to_i + 1).to_s,
      target: app_name
    )

    # Build Mac Catalyst app
    build_app(
      workspace: workspace_name,
      scheme: 'Azkar',
      destination: "platform=macOS,arch=arm64,variant=Mac Catalyst",
      skip_codesigning: false
    )
    
    # Upload to App Store
    upload_to_app_store(
      api_key: get_api_key,
      platform: "osx",
      force: true,
      submit_for_review: true,
      skip_screenshots: true,
      run_precheck_before_submit: false,
      submission_information: {
        add_id_info_uses_idfa: false,
        export_compliance_uses_encryption: false
      }
    )
  end
end
