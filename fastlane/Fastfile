default_platform(:ios)

APPLE_ID = ENV['APPLE_ID']
APP_ID = ENV['APP_ID']
WIDGETS_ID = ENV['WIDGETS_ID']
APP_APPLE_ID = ENV['APP_APPLE_ID']
AUTH_KEY_CONTENT = ENV['AUTH_KEY_CONTENT']
AUTH_KEY_ID = ENV['AUTH_KEY_ID']
AUTH_KEY_ISSUER_ID = ENV['AUTH_KEY_ISSUER_ID']
MATCH_GIT_AUTH = ENV['MATCH_GIT_AUTH']
MATCH_GIT_URL = ENV['MATCH_GIT_URL']
ITC_TEAM_ID = ENV['ITC_TEAM_ID']
TEAM_ID = ENV['TEAM_ID']
TEMP_KEYCHAIN_USER = ENV['TEMP_KEYCHAIN_USER']
TEMP_KEYCHAIN_PASSWORD = ENV['TEMP_KEYCHAIN_PASSWORD']
PROVISIONING_PROFILE_SPECIFIER = ENV['PROVISIONING_PROFILE_SPECIFIER']

# Keychain related operations.
def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: 0
  )
end

def project_name
  "Azkar.xcodeproj"
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

def app_name
  "Azkar"
end

def get_api_key
  api_key = app_store_connect_api_key(
    key_id: AUTH_KEY_ID,
    issuer_id: AUTH_KEY_ISSUER_ID,
    key_content: AUTH_KEY_CONTENT,            
    duration: 1200,            
    in_house: false
  )
end

desc 'Synchronizes certificates / profiles using via the App Store Connect API. Optionally creates new ones.'
private_lane :match_configuration do |options|
  match(
    type: options[:type] || 'appstore',
    app_identifier: options[:bundle_id],
    git_basic_authorization: Base64.strict_encode64(MATCH_GIT_AUTH),
    readonly: options[:force] == false,
    keychain_name: options[:keychain_user],
    keychain_password: options[:keychain_password],
    api_key: get_api_key,
    force_for_new_devices: options[:force_for_new_devices] == true
  )
end

platform :ios do

  desc 'Synchronizes certificates / profiles and optionally creates new ones.'
  lane :sync_signing do
    bundle_ids = "#{APP_ID},#{WIDGETS_ID}"
    match_configuration(type: 'appstore', bundle_id: bundle_ids)
  end

  desc "Push a new release build to the App Store"
  lane :release do |options|
    changelog = File.read("./Changelog.txt")
    sync_signing

    current_build_number = get_build_number_from_plist(
      xcodeproj: project_name,
      target: app_name
    )
    new_build_number = current_build_number.to_i + 1
    increment_build_number_in_plist(
      xcodeproj: project_name,
      build_number: new_build_number.to_s, 
      target: app_name
    )

    build_app(project: project_name, scheme: 'Azkar')
    testflight(api_key: get_api_key, changelog: changelog)
  end

  lane :closed_beta do
    setup_ci

    sync_signing
    
    increment_build_number_in_plist(
      xcodeproj: project_name,
      build_number: ENV['GITHUB_RUN_ID'], 
      target: app_name
    )

    build_app(project: project_name, scheme: 'Azkar')

    testflight(
      api_key: get_api_key,
      distribute_external: true,
      groups: ['Main'],
      changelog: File.read("./Changelog.txt")
    )
  end

end

platform :mac do

  desc 'Synchronizes certificates / profiles and optionally creates new ones.'
  lane :sync_signing do
    match_configuration
  end

  desc 'Build app'
  lane :release do
    sync_signing

    changelog = File.read("./changelog")
    build_mac_app(
      destination: "generic/platform=macOS,variant=Mac Catalyst",
      installer_cert_name:
        '3rd Party Mac Developer Installer: Al Jawziyya (486STKKP6Y)'
    )

    current_build_number = get_build_number_from_plist(
      xcodeproj: project_name,
      target: app_name
    )
    new_build_number = current_build_number.to_i + 1
    increment_build_number_in_plist(
      xcodeproj: project_name,
      build_number: new_build_number.to_s, 
      target: app_name
    )

    build_app(project: project_name, scheme: 'Azkar')
    testflight(api_key: get_api_key, changelog: changelog)
  end

end
